import type { BaseTranslation } from '../i18n-types';

const en = {
  Schema_Loaded_Successfully: 'Schema loaded successfully',
  Schema_Loaded_Failed: 'Schema loaded failed {0}',
  Create_Shim_Successfully: 'Create shim successfully',
  Please_Config_Unicloud_Link: 'Please config unicloud.link (not configured or empty)',
  About_Unicloud_Link_Config: 'About unicloud.link config reference',
  Unicloud_Build_Success: 'build success',
  Unicloud_Build_Failed: 'build failed',
  Unicloud_Pack_Success: 'pack success, please move to hbuilderx to execute the upload cloud function command',
  Unicloud_Pack_Failed: 'pack failed',
  Unicloud_Target_Dir_Not_Exist: 'target dir not exist package.json',
  Unicloud_Link_Create_Success: 'link create success',
  Unicloud_Link_Create_Failed: 'link create failed',
  Unicloud_Link_Create_Success_Hint:
    'In hbuilderx, the folders created by soft links cannot be displayed in the project management, you can open the file directory to see the details',
  Unicloud_Link_Skip_Create: 'skip create link, because target dir already exist sword dir',
  Shim_Folder_Is_Cleaned: 'shim folder is cleaned',
  Delete_Shim_Folder_Failed: 'delete shim folder failed',
  Shim_Folder_Is_Not_A_Directory: 'shim folder is not a directory',
  PresetApi_Name_Is_Required: 'presetApi-name is required',
  Schema2Interface_Documentation: 'Schema2Interface Documentation',
  Schema2Interface_Only_Support_Unicloud_Platform: 'schema2interface only support unicloud platform',
  Schema2Interface_Current_Platform_Is: 'current platform is {0}',
  Schema2Interface_Platform_Dir_Not_Found: 'platform dir not found',
  Schema2Interface_Platform_Dir_Not_Found_Hint: 'please confirm you are using unicloud project',
  Schema2Interface_Compile_Success: 'compile success ->',
  Schema2Interface_Database_Dir_Not_Found: 'database dir not found',
  Server_Pack_Success: 'pack success',
  Server_Pack_Failed: 'pack failed',
  Launch_Entry_File: 'Launch entry file',
  API_Create_Failed: 'API create failed',
  API_Create_Success: 'API create success, index.ts,proto.ts has been automatically generated',
  Watching_Src_Api_Folder: 'Watching src/api folder...',
  Rebuild_Trigger_File: 'Rebuild trigger file: {0}',
  Start_Generate_Documentation: 'Start generate documentation',
  PackageJson_Not_Found: 'Package.json not found',
  Generate_Documentation_Error: 'Generate documentation error',
  Generate_Markdown_Documentation_Success: 'Generate markdown documentation success',
  Generate_Openapi_Json_Success: 'Generate openapi.json success',
  CLI_Version: 'CLI version',
  Project_Name: 'Project name',
  Select_Project_Version: 'Select project version',
  Project_Exist: 'Project exist',
  Init_Project_Success: 'Init {0} project success',
  Init_Project_Success_Hint: 'You can use pnpm, yarn, npm to install the project (I won’t install it for you, I don’t know what you like ❤️)',
  Share_Success: 'Share success',
  Share_Success_Hint: 'you can run `npm publish`',
  Share_Failed: 'Share failed, please check the configuration file',
  Share_Failed_Hint:
    'When you run the share command, the current directory must be in the dev environment. If you execute the command in the prod environment, this is not allowed, because the api.json cache file is necessary for the share command in the dev environment, and in the prod environment The api.json strips out the necessary analysis.',
  Util_Name_Is_Required: 'util-name is required',
  Util_Name_Not_Found: '{0} not found',
  Util_Name_Not_Found_Hint: 'you can see the util-name list in the documentation',
  Parse_Route_Validate_Error_Hint:
    'parse route validate error, please check your route list, support route list: https://github.com/swordjs/sword-framework/issues/25#issuecomment-1530995497'
} satisfies BaseTranslation;

export default en;
